{"version":3,"sources":["assets/img/twitter-logo.png","components/Header/Header.js","components/ModalContainer/ModalContainer.js","components/FromSendTweet/FormSendTweet.js","utils/contants.js","components/SendTweet/SendTweet.js","components/Tweet/Tweet.js","components/ListTweets/ListTweets.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","src","TwitterLogo","alt","ModalContainer","props","isOpenModal","closeModal","children","Modal","open","onClose","closeAfterTransition","FormSendTweet","sendTweet","useState","name","tweet","formValue","setFormValue","onSubmit","event","onChange","target","value","FormControl","FormGroup","TextField","type","placeholder","margin","multiline","rows","Button","TWEETS_STORAGE","SendTweet","setToastProps","allTweets","setisOpenModal","Fab","color","aria-label","onClick","preventDefault","allTweetsArray","time","moment","push","localStorage","setItem","JSON","stringify","text","Tweet","index","deleteTweet","Card","CardContent","format","ListTweets","length","Grid","container","spacing","map","item","xs","App","toastProps","setAllTweets","reloadTweets","setReloadTweets","useEffect","AllTweetsStorage","getItem","parse","Container","maxWidth","splice","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","message","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e51e9487.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.b413b75b.png\";","import React from \"react\";\r\nimport TwitterLogo from \"../../assets/img/twitter-logo.png\";\r\nimport \"./Header.scss\";\r\n\r\nexport default function Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <img src={TwitterLogo} alt=\"Tweers Simulator\" />\r\n      <h1>Tweets Simulator</h1>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Modal } from \"@material-ui/core\";\r\n\r\nimport \"./ModalContainer.scss\";\r\n\r\nexport default function ModalContainer(props) {\r\n  const { isOpenModal, closeModal, children } = props;\r\n\r\n  return (\r\n    <Modal\r\n      className=\"modal-container\"\r\n      open={isOpenModal}\r\n      onClose={closeModal}\r\n      closeAfterTransition\r\n    >\r\n      <div>{children}</div>\r\n    </Modal>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { FormControl, FormGroup, TextField, Button } from \"@material-ui/core\";\r\n\r\nimport \"./FormSendTweet.scss\";\r\n\r\nexport default function FormSendTweet(props) {\r\n  const { sendTweet } = props;\r\n  /* ====================================\r\n  ***UseState Capturar los valores***\r\n  ==================================== */\r\n  const [formValue, setFormValue] = useState({\r\n    name: \"\",\r\n    tweet: \"\",\r\n  });\r\n\r\n  /* ====================================\r\n  ***onChange***\r\n  ==================================== */\r\n\r\n  const formChange = (event) => {\r\n    setFormValue({\r\n      ...formValue,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  /* ==================================\r\n  ***RETORNAMOS LA VISTA ***\r\n  ================================== */\r\n  return (\r\n    <div className=\"form-send-tweet\">\r\n      <h2 className=\"form-send-tweet__title\">Enviar Tweet</h2>\r\n      <form\r\n        className=\"form-send-tweet__form\"\r\n        onSubmit={(event) => sendTweet(event, formValue)}\r\n        onChange={formChange}\r\n      >\r\n        <FormControl>\r\n          <FormGroup>\r\n            <TextField\r\n              className=\"form-send-tweet__form-name\"\r\n              type=\"text\"\r\n              name=\"name\"\r\n              placeholder=\"Nombre de usuario\"\r\n              margin=\"normal\"\r\n            />\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <TextField\r\n              className=\"form-send-tweet__form-textarea\"\r\n              name=\"tweet\"\r\n              multiline\r\n              rows=\"6\"\r\n              placeholder=\"Escribe tu Tweet...\"\r\n              margin=\"normal\"\r\n            />\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Button type=\"submit\">Enviar Tweet</Button>\r\n          </FormGroup>\r\n        </FormControl>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","export const TWEETS_STORAGE = \"tweet-lt\";\r\n","import React, { useState } from \"react\";\r\nimport { Fab } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport moment from \"moment\";\r\nimport ModalContainer from \"../ModalContainer\";\r\nimport FormSendTweet from \"../FromSendTweet\";\r\nimport { TWEETS_STORAGE } from \"../../utils/contants\";\r\n\r\nimport \"./SendTweet.scss\";\r\n\r\nexport default function SendTweet(props) {\r\n  const { setToastProps, allTweets } = props;\r\n  /* ====================================\r\n  ***UseState Para abrir ventana Modal***\r\n  ==================================== */\r\n  const [isOpenModal, setisOpenModal] = useState(false);\r\n\r\n  const openModal = () => {\r\n    setisOpenModal(true);\r\n  };\r\n  const closeModal = () => {\r\n    setisOpenModal(false);\r\n  };\r\n\r\n  /* ====================================\r\n  ***Funcion para enviar el formulario***\r\n  ==================================== */\r\n  const sendTweet = (event, formValue) => {\r\n    event.preventDefault();\r\n    const { name, tweet } = formValue;\r\n    let allTweetsArray = [];\r\n\r\n    if (allTweets) {\r\n      allTweetsArray = allTweets;\r\n    }\r\n\r\n    //VALIDAMOS EL FORMULARIO\r\n    if (!name || !tweet) {\r\n      setToastProps({\r\n        open: true,\r\n        text: \"Advertencia: Todos los campos son obligatorios\",\r\n      });\r\n    } else {\r\n      formValue.time = moment();\r\n      allTweetsArray.push(formValue);\r\n      localStorage.setItem(TWEETS_STORAGE, JSON.stringify(allTweetsArray));\r\n      setToastProps({\r\n        open: true,\r\n        text: \"Tweet enviado correctamente\",\r\n      });\r\n      closeModal();\r\n    }\r\n    allTweetsArray = [];\r\n  };\r\n  /* ==================================\r\n  ***RETORNAMOS LA VISTA ***\r\n  ================================== */\r\n  return (\r\n    <div className=\"send-tweet\">\r\n      <Fab\r\n        className=\"send-tweet__opend-modal\"\r\n        color=\"primary\"\r\n        aria-label=\"add\"\r\n        onClick={openModal}\r\n      >\r\n        <AddIcon />\r\n      </Fab>\r\n\r\n      {/* ==================================\r\n      ***MODAL PARA ESCRIBIR TWEET***\r\n      ================================== */}\r\n      <ModalContainer isOpenModal={isOpenModal} closeModal={closeModal}>\r\n        <FormSendTweet sendTweet={sendTweet} />\r\n      </ModalContainer>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Card, CardContent } from \"@material-ui/core\";\r\nimport DeleteTwoToneIcon from \"@material-ui/icons/DeleteTwoTone\";\r\nimport moment from \"moment\";\r\n\r\nimport \"./Tweet.scss\";\r\n\r\nexport default function Tweet(props) {\r\n  const {\r\n    tweet: { name, tweet, time },\r\n    index,\r\n    deleteTweet,\r\n  } = props;\r\n\r\n  /* ==================================\r\n  ***RETORNAMOS LA VISTA***\r\n  ================================== */\r\n  return (\r\n    <Card className=\"tweet\">\r\n      <CardContent>\r\n        <div className=\"tweet__header\">\r\n          <h5>{name}</h5>\r\n          <DeleteTwoToneIcon onClick={() => deleteTweet(index)} />\r\n        </div>\r\n        <p>{tweet}</p>\r\n        <div className=\"tweet__date-add-tweet\">\r\n          {moment(time).format(\"DD/MM/YYYY HH:mm\")}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport Tweet from \"../Tweet\";\r\n\r\nimport \"./ListTweets.scss\";\r\n\r\nexport default function ListTweets(props) {\r\n  const { allTweets, deleteTweet } = props;\r\n\r\n  /* ==================================\r\n  ***Funcion para mostrar los Tweets que creamos***\r\n  ================================== */\r\n  if (!allTweets || allTweets.length == 0) {\r\n    return (\r\n      <div className=\"list-tweets-empty\">\r\n        <h2>No hay Tweets para Mostrar...</h2>\r\n      </div>\r\n    );\r\n  }\r\n  /* ==================================\r\n  ***RETORNAMOS LA VISTA***\r\n  ================================== */\r\n  return (\r\n    <Grid container spacing={3} className=\"list-tweets\">\r\n      {allTweets.map((tweet, index) => (\r\n        <Grid key={index} item xs={4}>\r\n          <Tweet tweet={tweet} index={index} deleteTweet={deleteTweet} />\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\nimport { Container, Snackbar } from \"@material-ui/core\";\nimport Header from \"./components/Header\";\nimport SendTweet from \"./components/SendTweet\";\nimport { TWEETS_STORAGE } from \"./utils/contants\";\nimport ListTweets from \"./components/ListTweets\";\n\nfunction App() {\n  const [toastProps, setToastProps] = useState({\n    open: false,\n    text: null,\n  });\n  /* ===========================================\n  ***UseState para actualizar el LocalStorage \n  y almacenar Tweets***\n  ============================================ */\n  const [allTweets, setAllTweets] = useState([]);\n  const [reloadTweets, setReloadTweets] = useState(false);\n\n  useEffect(() => {\n    const AllTweetsStorage = localStorage.getItem(TWEETS_STORAGE);\n    const allTweetsArray = JSON.parse(AllTweetsStorage);\n    setAllTweets(allTweetsArray);\n    setReloadTweets(false);\n  }, [reloadTweets]);\n\n  /* ==================================\n  ***Funcion para eliminar los Tweets***\n  ================================== */\n\n  const deleteTweets = (index) => {\n    allTweets.splice(index, 1);\n    setAllTweets(allTweets);\n    localStorage.setItem(TWEETS_STORAGE, JSON.stringify(allTweets));\n    setReloadTweets(true);\n  };\n\n  /* ==================================\n  ***Funcion para cerrar Snackbar***\n  ================================== */\n  const handleClose = () => {\n    setToastProps({\n      ...toastProps,\n      open: false,\n    });\n  };\n\n  /* ==================================\n  ***RETORNAMOS LA VISTA***\n  ================================== */\n  return (\n    <Container className=\"tweets-simulator\" maxWidth={false}>\n      <Header />\n      <SendTweet setToastProps={setToastProps} allTweets={allTweets} />\n      <ListTweets allTweets={allTweets} deleteTweet={deleteTweets} />\n      <Snackbar\n        anchorOrigin={{\n          vertical: \"top\",\n          horizontal: \"right\",\n        }}\n        open={toastProps.open}\n        autoHideDuration={1000}\n        message={<span id=\"message-id\">{toastProps.text}</span>}\n        onClose={handleClose}\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}